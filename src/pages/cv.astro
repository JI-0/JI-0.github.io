---
import Layout from '../layouts/Layout.astro';
const pageTitle = "Posts";
---
<Layout pageTitle={pageTitle}>
    <script type="module">
      import * as PDFJS from '/pdf.mjs';
      // If absolute URL from the remote server is provided, configure the CORS
      // header on that server.
      var url = "/CV.pdf";

      // Loaded via <script> tag, create shortcut to access PDF.js exports.
      var { pdfjsLib } = globalThis;

      // The workerSrc property shall be specified.
      pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.mjs';

      var pdfDoc = null,
          pageNum = 1,
          pageRendering = false,
          pageNumPending = null,
          scale = 1.2,
          canvas = document.getElementById('the-canvas'),
          ctx = canvas.getContext('2d');

      /**
       * Get page info from document, resize canvas accordingly, and render page.
       * @param num Page number.
       */
      function renderPage(num) {
        pageRendering = true;
        // Using promise to fetch the page
        pdfDoc.getPage(num).then(function(page) {
          var viewport = page.getViewport({scale: scale});
          canvas.height = viewport.height * 2;
          canvas.width = viewport.width * 2;
          canvas.style.height = viewport.width;
          canvas.style.width = viewport.width;

          // Render PDF page into canvas context
          var renderContext = {
            canvasContext: ctx,
            viewport: viewport,
            transform: [2, 0, 0, 2, 0, 0] // force it bigger size
          };
          var renderTask = page.render(renderContext);

          // Wait for rendering to finish
          renderTask.promise.then(function() {
            pageRendering = false;
            if (pageNumPending !== null) {
              // New page rendering is pending
              renderPage(pageNumPending);
              pageNumPending = null;
            }
          });
        });

        // Update page counters
        document.getElementById('page_num').textContent = num;
      }

      /**
       * If another page rendering in progress, waits until the rendering is
       * finised. Otherwise, executes rendering immediately.
       */
      function queueRenderPage(num) {
        if (pageRendering) {
          pageNumPending = num;
        } else {
          renderPage(num);
        }
      }

      /**
       * Displays previous page.
       */
      function onPrevPage() {
        if (pageNum <= 1) {
          return;
        }
        pageNum--;
        queueRenderPage(pageNum);
      }
      document.getElementById('prev').addEventListener('click', onPrevPage);

      /**
       * Displays next page.
       */
      function onNextPage() {
        if (pageNum >= pdfDoc.numPages) {
          return;
        }
        pageNum++;
        queueRenderPage(pageNum);
      }
      document.getElementById('next').addEventListener('click', onNextPage);

      /**
       * Asynchronously downloads PDF.
       */
      pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
        pdfDoc = pdfDoc_;
        document.getElementById('page_count').textContent = pdfDoc.numPages;

        // Initial/first page rendering
        renderPage(pageNum);
      });
    </script>
    <br><br><br>
    <div>
        &nbsp; &nbsp;
    </div>
    <div class="pdf-wrapper">
        <button id="prev"><img src="left-arrow.svg" alt="prev"></button>
        <div class="pdf-canvas-wrapper">
            <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
            <canvas id="the-canvas"></canvas>
            <br>
            <a data-aos="fade-in" data-aos-delay="300" href="/CV.pdf" target="_blank" id="download">Download</a>
        </div>
        <button id="next"><img src="right-arrow.svg" alt="next"></button>
    </div>
</Layout>
<style>
    .pdf-wrapper {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .pdf-canvas-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    #download {
        background: rgba(0,0,0,0);
        border: 2px solid #1cbbff;
        border-radius: 8px;
        color: #1cbbff;
        font: 600 16px 'Josefin Sans', sans-serif;
        padding: 8px 16px;
        transition: background-color 0.4s, color 0.4s;
    }

    #download:hover {
        background-color: #1cbbff;
        color: #1e1e2e;
        cursor: pointer;
    }

    #the-canvas {
        border: 1px solid black;
        direction: ltr;
        width: 98%;
    }

    #prev img,
    #next img {
        max-width: 50px;
        max-height: 50px;
    }

    @media (max-width: 900px) {
        #prev img,
        #next img {
            max-width: 30px;
            max-height: 30px;
        }
    }

    @media (max-width: 600px) {
        #prev img,
        #next img {
            max-width: 10px;
            max-height: 10px;
        }
    }
</style>
